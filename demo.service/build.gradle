apply plugin: 'com.android.application'

android {
    compileSdkVersion Integer.parseInt(compile_sdk_version)
    defaultConfig {
        minSdkVersion Integer.parseInt(min_sdk_version)
        targetSdkVersion Integer.parseInt(target_sdk_version)
        versionCode Integer.parseInt(version_code)
        versionName version_name
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    implementation 'com.crgt.ilife:demo-serviceModule:1.0.0-SNAPSHOT'
}



def destDir = project.rootDir.path + "/domin.test/" //todo:替换成MeriSdk路径

//清除service目录
task cleanService(type: Delete) {
    println 'cleanService:' + destDir
    delete destDir
}

//把api文件收集放置到sdk目录下
task collectService(type: Copy, dependsOn: cleanService) {
    println '=============arrangeService() begin============'
    def rootDir = project.rootDir
    def suffix = '.api'
    def javaSuffix = '.java'
    def tree = fileTree(rootDir).include('**/*' + suffix)

    println "rootDir:$rootDir"

    // 遍历文件树
    tree.each { File file ->
        println file.name
        copy {
            from file.path
            into destDir

            rename {
                file.name.replace(suffix, javaSuffix)
            }
        }
    }
    println '============arrangeService() end=============='
}


afterEvaluate {
    android.applicationVariants.all { variant ->
        variant.javaCompiler.dependsOn(collectService)
    }
}